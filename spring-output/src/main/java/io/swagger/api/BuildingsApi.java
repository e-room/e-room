/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Building;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-07-05T06:53:15.751Z[GMT]")
@Validated
public interface BuildingsApi {

    @Operation(summary = "id값으로 특정 건물을 찾아낼 때", description = "검색한 리뷰에서 건물 정보를 보고 싶을 때 자신이 살았던 방 목록에서 건물 정보를 보고 싶을 때 등등", tags={ "Building" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Building.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/buildings/{buildingId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Building> getBuildingById(@Parameter(in = ParameterIn.PATH, description = "빌딩의 numeric ID", required=true, schema=@Schema()) @PathVariable("buildingId") Integer buildingId);


    @Operation(summary = "집 주인이 건물을 등록할 때", description = "플랫폼에 집 주인이 추가되고, 집 주인이 건물을 등록하는 기능이 생긴다면 건물을 직접 등록하는 api도 필요할 것", tags={ "Building", "doLater" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/buildings/{buildingId}",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Object> registerBuilding(@Parameter(in = ParameterIn.PATH, description = "빌딩의 numeric ID", required=true, schema=@Schema()) @PathVariable("buildingId") Integer buildingId);


    @Operation(summary = "집 주인이 건물 정보를 수정할 때", description = "플랫폼에 집 주인이 추가되고, 집 주인이 건물을 리모델링을 하거나 건물주가 바뀐다면 수정을 요청하는 api도 필요할 것", tags={ "Building", "doLater" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "건물에 대한 정보가 정상적으로 수정됬음", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/buildings/{buildingId}",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Object> updateBuilding(@Parameter(in = ParameterIn.PATH, description = "빌딩의 numeric ID", required=true, schema=@Schema()) @PathVariable("buildingId") Integer buildingId);

}

