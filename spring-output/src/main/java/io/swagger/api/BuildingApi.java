/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.34).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Building;
import io.swagger.model.Review;
import io.swagger.model.Room;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-07-05T06:53:15.751Z[GMT]")
@Validated
public interface BuildingApi {

    @Operation(summary = "Review를 등록할 때", description = "사용자들이 Review를 등록할 때 사용하는", tags={ "Review" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "성공적으로 리뷰를 등록", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Review.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest 잘못된 requestBody") })
    @RequestMapping(value = "/building/room/review/{reviewId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Review> deleteReview(@Parameter(in = ParameterIn.PATH, description = "리뷰의 numeric Id", required=true, schema=@Schema()) @PathVariable("reviewId") Integer reviewId);


    @Operation(summary = "reviewId 가진 Review 정보를 반환", description = "reviewId를 가진 Room 정보를 반환", tags={ "Review" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Review.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/building/room/review/{reviewId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Review> getReviewByReviewId(@Parameter(in = ParameterIn.PATH, description = "리뷰의 numeric Id", required=true, schema=@Schema()) @PathVariable("reviewId") Integer reviewId);


    @Operation(summary = "roomId를 가진 Room 정보를 반환", description = "roomId를 가진 Room 정보를 반환", tags={ "Room" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))),
        
        @ApiResponse(responseCode = "404", description = "Not Found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))) })
    @RequestMapping(value = "/building/room/{roomId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Room> getRoomByRoomId(@Parameter(in = ParameterIn.PATH, description = "호실의 numeric Id", required=true, schema=@Schema()) @PathVariable("roomId") Integer roomId);


    @Operation(summary = "Review를 등록할 때", description = "사용자들이 Review를 등록할 때 사용하는", tags={ "Review" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "성공적으로 리뷰를 등록", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Review.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest 잘못된 requestBody") })
    @RequestMapping(value = "/building/room/review/{reviewId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Review> registerReview(@Parameter(in = ParameterIn.PATH, description = "리뷰의 numeric Id", required=true, schema=@Schema()) @PathVariable("reviewId") Integer reviewId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Object body);


    @Operation(summary = "특정 Building에 Room 정보를 추가할 때", description = "집 주인은 본인의 건물을 먼저 추가하고 해당하는 건물에 들어있는 호실 정보를 한번에 입력할 수 있다.", tags={ "Room", "doLater" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "건물 안에 있는 방 정보가 정상적으로 추가 됨.") })
    @RequestMapping(value = "/building/{buildingId}/room",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> registerRoomsInBuilding(@Parameter(in = ParameterIn.PATH, description = "빌딩의 numeric ID", required=true, schema=@Schema()) @PathVariable("buildingId") Integer buildingId, @Parameter(in = ParameterIn.DEFAULT, description = "호실 정보를 추가하기 위한 roomsList", required=true, schema=@Schema()) @Valid @RequestBody List<Room> body);


    @Operation(summary = "건물의 공통적인 정보로 건물을 검색할 때.", description = "건물을 검색하는 과정 - 주소 - 직거래 가능한지 - 주차 가능 등등", tags={ "Building" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successful operation", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Building.class)))),
        
        @ApiResponse(responseCode = "404", description = "Not Found 검색 요건에 맞는 건물이 존재하지 않을 때", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest 잘못된 queryParameter") })
    @RequestMapping(value = "/building",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Building>> searchBuildings(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "locationRange", required = false) Object locationRange, @Parameter(in = ParameterIn.QUERY, description = "직거래 가능한지" ,schema=@Schema()) @Valid @RequestParam(value = "direct", required = false) Boolean direct);


    @Operation(summary = "queryString을 통해 특정 Room에 대한 Review들을 검색", description = "지도나 리스트에서 필터를 통해 바로 리뷰 정보를 필터링할 때 사용", tags={ "Review" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "검색 조건에 맞는 리뷰 목록을 반환", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Review.class)))),
        
        @ApiResponse(responseCode = "404", description = "NotFound 검색 조건에 맞는 방 목록이 없음"),
        
        @ApiResponse(responseCode = "400", description = "BadRequest 잘못된 queryParameter") })
    @RequestMapping(value = "/building/room/{roomId}/review",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Review>> searchReviewByRoom(@Parameter(in = ParameterIn.PATH, description = "호실의 numeric Id", required=true, schema=@Schema()) @PathVariable("roomId") Integer roomId, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "orderByDate", required = false) Boolean orderByDate, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "orderByRating", required = false) Boolean orderByRating);


    @Operation(summary = "Review 정보로 바로 접근하여 검색하고 싶을 때", description = "지도나 리스트에서 필터를 통해 바로 리뷰 정보를 필터링할 때 사용", tags={ "Review" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "검색 조건에 맞는 리뷰 목록을 반환", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Review.class)))),
        
        @ApiResponse(responseCode = "404", description = "NotFound 검색 조건에 맞는 방 목록이 없음"),
        
        @ApiResponse(responseCode = "400", description = "BadRequest 잘못된 queryParameter") })
    @RequestMapping(value = "/building/room/review",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Review>> searchReviews(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "orderByDate", required = false) Boolean orderByDate, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "orderByRating", required = false) Boolean orderByRating);


    @Operation(summary = "queryString을 통해 특정 Building에 대한 Review들을 검색", description = "지도나 리스트에서 필터를 통해 바로 리뷰 정보를 필터링할 때 사용", tags={ "Review" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "검색 조건에 맞는 리뷰 목록을 반환", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Review.class)))),
        
        @ApiResponse(responseCode = "404", description = "NotFound 검색 조건에 맞는 방 목록이 없음"),
        
        @ApiResponse(responseCode = "400", description = "BadRequest 잘못된 queryParameter") })
    @RequestMapping(value = "/building/{buildingId}/room/review",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Review>> searchReviewsByBuilding(@Parameter(in = ParameterIn.PATH, description = "빌딩의 numeric Id", required=true, schema=@Schema()) @PathVariable("buildingId") Integer buildingId, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "orderByDate", required = false) Boolean orderByDate, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "orderByRating", required = false) Boolean orderByRating);


    @Operation(summary = "queryString을 통해 바로 Room 정보를 검색하고 싶을 때", description = "지도나 리스트에서 필터를 통해 바로 방을 검색할 때 사용", tags={ "Room" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "검색 조건에 맞는 방 목록을 반환", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Room.class)))),
        
        @ApiResponse(responseCode = "404", description = "NotFound 검색 조건에 맞는 방 목록이 없음"),
        
        @ApiResponse(responseCode = "400", description = "BadRequest 잘못된 queryParameter") })
    @RequestMapping(value = "/building/room",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Room>> searchRooms(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "locationRange", required = false) Object locationRange, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "orderByDate", required = false) Boolean orderByDate, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "orderByRating", required = false) Boolean orderByRating);


    @Operation(summary = "특정 Building에 해당하는 Room을 검색할 때", description = "지도 뷰든 리스트 뷰든, 건물 id에 해당하는 room 리스트를 알고 싶을 때", tags={ "Room" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "건물 id에 해당하는 room List를 반환", content = @Content(mediaType = "applicaiton/json", array = @ArraySchema(schema = @Schema(implementation = Room.class)))) })
    @RequestMapping(value = "/building/{buildingId}/room",
        produces = { "applicaiton/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Room>> searchRoomsByBuilding(@Parameter(in = ParameterIn.PATH, description = "빌딩의 numeric ID", required=true, schema=@Schema()) @PathVariable("buildingId") Integer buildingId);


    @Operation(summary = "Review를 등록할 때", description = "사용자들이 Review를 등록할 때 사용하는", tags={ "Review" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "성공적으로 리뷰를 등록", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Review.class))),
        
        @ApiResponse(responseCode = "400", description = "BadRequest 잘못된 requestBody") })
    @RequestMapping(value = "/building/room/review/{reviewId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Review> updateReview(@Parameter(in = ParameterIn.PATH, description = "리뷰의 numeric Id", required=true, schema=@Schema()) @PathVariable("reviewId") Integer reviewId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody Object body);


    @Operation(summary = "특정 Building의 Room 정보를 수정할 때", description = "집 주인은 본인의 건물을 먼저 추가하고 해당하는 건물에 들어있는 호실 정보를 한번에 입력할 수 있다.", tags={ "Room", "doLater" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "건물 안에 있는 방 정보가 정상적으로 추가 됨.") })
    @RequestMapping(value = "/building/{buildingId}/room",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateRoomsInBuildings(@Parameter(in = ParameterIn.PATH, description = "빌딩의 numeric ID", required=true, schema=@Schema()) @PathVariable("buildingId") Integer buildingId, @Parameter(in = ParameterIn.DEFAULT, description = "호실 정보를 수정하기 위한 roomsList", required=true, schema=@Schema()) @Valid @RequestBody List<Room> body);

}

